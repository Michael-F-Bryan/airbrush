(function() {var implementors = {};
implementors["airbrush"] = [{"text":"impl Hash for WorldSpace","synthetic":false,"types":[]},{"text":"impl Hash for CanvasSpace","synthetic":false,"types":[]}];
implementors["bytemuck"] = [{"text":"impl Hash for PodCastError","synthetic":false,"types":[]}];
implementors["byteorder"] = [{"text":"impl Hash for BigEndian","synthetic":false,"types":[]},{"text":"impl Hash for LittleEndian","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T:&nbsp;Hash&gt; Hash for CachePadded&lt;T&gt;","synthetic":false,"types":[]}];
implementors["deflate"] = [{"text":"impl Hash for Compression","synthetic":false,"types":[]},{"text":"impl Hash for SpecialOptions","synthetic":false,"types":[]},{"text":"impl Hash for CompressionOptions","synthetic":false,"types":[]},{"text":"impl Hash for MatchingType","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L:&nbsp;Hash, R:&nbsp;Hash&gt; Hash for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["euclid"] = [{"text":"impl&lt;T:&nbsp;Hash&gt; Hash for Angle&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Hash, U&gt; Hash for Box2D&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Hash, U&gt; Hash for Box3D&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, U&gt; Hash for HomogeneousVector&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Hash,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Hash, U&gt; Hash for Length&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, U&gt; Hash for Point2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Hash,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, U&gt; Hash for Point3D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Hash,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Hash, U&gt; Hash for Rect&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Hash, Src:&nbsp;Hash, Dst:&nbsp;Hash&gt; Hash for RigidTransform3D&lt;T, Src, Dst&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Hash for Rotation2D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Hash,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Hash for Rotation3D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Hash,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Hash, Src, Dst&gt; Hash for Scale&lt;T, Src, Dst&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, U&gt; Hash for SideOffsets2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Hash,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, U&gt; Hash for Size2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Hash,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, U&gt; Hash for Size3D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Hash,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Hash for Transform2D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Hash,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Hash for Transform3D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Hash,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Hash for Translation2D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Hash,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Hash for Translation3D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Hash,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Hash, U&gt; Hash for Vector2D&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Hash, U&gt; Hash for Vector3D&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl Hash for BoolVector2D","synthetic":false,"types":[]},{"text":"impl Hash for BoolVector3D","synthetic":false,"types":[]},{"text":"impl Hash for UnknownUnit","synthetic":false,"types":[]}];
implementors["gif"] = [{"text":"impl Hash for AnyExtension","synthetic":false,"types":[]}];
implementors["image"] = [{"text":"impl Hash for UnsupportedErrorKind","synthetic":false,"types":[]},{"text":"impl Hash for ParameterErrorKind","synthetic":false,"types":[]},{"text":"impl Hash for LimitErrorKind","synthetic":false,"types":[]},{"text":"impl Hash for ImageFormatHint","synthetic":false,"types":[]},{"text":"impl Hash for Rect","synthetic":false,"types":[]},{"text":"impl Hash for SampleLayout","synthetic":false,"types":[]},{"text":"impl Hash for Error","synthetic":false,"types":[]},{"text":"impl Hash for NormalForm","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Hash + Pixel, Container:&nbsp;Hash&gt; Hash for ImageBuffer&lt;P, Container&gt;","synthetic":false,"types":[]},{"text":"impl Hash for ColorType","synthetic":false,"types":[]},{"text":"impl Hash for ExtendedColorType","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Hash + Primitive&gt; Hash for Rgb&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Hash + Primitive&gt; Hash for Bgr&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Hash + Primitive&gt; Hash for Luma&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Hash + Primitive&gt; Hash for Rgba&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Hash + Primitive&gt; Hash for Bgra&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Hash + Primitive&gt; Hash for LumaA&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Hash for ImageFormat","synthetic":false,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Hash for CompressionStrategy","synthetic":false,"types":[]},{"text":"impl Hash for TDEFLFlush","synthetic":false,"types":[]},{"text":"impl Hash for TDEFLStatus","synthetic":false,"types":[]},{"text":"impl Hash for CompressionLevel","synthetic":false,"types":[]},{"text":"impl Hash for TINFLStatus","synthetic":false,"types":[]},{"text":"impl Hash for MZFlush","synthetic":false,"types":[]},{"text":"impl Hash for MZStatus","synthetic":false,"types":[]},{"text":"impl Hash for MZError","synthetic":false,"types":[]},{"text":"impl Hash for DataFormat","synthetic":false,"types":[]},{"text":"impl Hash for StreamResult","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T:&nbsp;Clone + Integer + Hash&gt; Hash for Ratio&lt;T&gt;","synthetic":false,"types":[]}];
implementors["png"] = [{"text":"impl Hash for Transformations","synthetic":false,"types":[]}];
implementors["tiff"] = [{"text":"impl Hash for InflateError","synthetic":false,"types":[]},{"text":"impl Hash for TiffUnsupportedError","synthetic":false,"types":[]},{"text":"impl Hash for Tag","synthetic":false,"types":[]},{"text":"impl Hash for Type","synthetic":false,"types":[]},{"text":"impl Hash for CompressionMethod","synthetic":false,"types":[]},{"text":"impl Hash for PhotometricInterpretation","synthetic":false,"types":[]},{"text":"impl Hash for PlanarConfiguration","synthetic":false,"types":[]},{"text":"impl Hash for Predictor","synthetic":false,"types":[]},{"text":"impl Hash for ResolutionUnit","synthetic":false,"types":[]},{"text":"impl Hash for SampleFormat","synthetic":false,"types":[]},{"text":"impl Hash for ColorType","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()